from PyQt5.QtCore import QThread, pyqtSignal

class AnalysisStepThread(QThread):
    """
    Generic worker thread to execute a single analysis step.
    Runs the provided function (func) on the DicomExam object (de).
    Emits logs, result folder paths, and a finished signal for the GUI.
    """
    log_signal = pyqtSignal(str)        # For status/progress updates
    plot_folder_signal = pyqtSignal(str) # Path to plots generated by this step
    finished_signal = pyqtSignal()      # Indicates step completion
    
    def __init__(self, func, de):
        super().__init__()
        self.func = func   # Function to run in this thread
        self.de = de       # DicomExam or similar analysis object

    def run(self):
        """
        Executes the analysis function in a separate thread.
        - Captures log messages
        - Emits the resulting folder path if successful
        - Always signals completion (even on failure)
        """
        try:
            # Run the analysis step with logging
            folder = self.func(self.de, log_func=self.log_signal.emit)
            # Notify GUI of plot folder result
            self.plot_folder_signal.emit(folder)
        except Exception as e:
            # Forward error message to GUI logs
            self.log_signal.emit(f"Analysis step failed: {e}")
        finally:
            # Always let GUI know the thread has finished
            self.finished_signal.emit()
